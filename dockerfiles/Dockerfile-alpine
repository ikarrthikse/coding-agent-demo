# Alpine JRE with custom JRE using jlink (following working pattern)
# Stage 1: Build custom JRE
FROM amazoncorretto:21-alpine AS jre-builder
WORKDIR /app

# Install necessary tools in a single step
RUN apk add --no-cache unzip binutils

# Copy the JAR file
COPY build/libs/demo-0.0.1-SNAPSHOT.jar app.jar

# Extract JAR, analyze dependencies, and create custom JRE in combined steps
RUN unzip app.jar -d temp && \
    jdeps \
        --print-module-deps \
        --ignore-missing-deps \
        --recursive \
        --multi-release 21 \
        --class-path="./temp/BOOT-INF/lib/*" \
        --module-path="./temp/BOOT-INF/lib/*" \
        app.jar > /modules.txt && \
    echo "Found modules:" && \
    cat /modules.txt && \
    jlink \
        --verbose \
        --add-modules "$(cat /modules.txt),jdk.crypto.ec,jdk.crypto.cryptoki" \
        --strip-debug \
        --no-man-pages \
        --no-header-files \
        --compress=2 \
        --output /jre && \
    echo "Custom JRE created successfully" && \
    ls -la /jre/bin/

# Verify the custom JRE
RUN /jre/bin/java -version

# Stage 2: Runtime image
FROM alpine:3.19
WORKDIR /app

# Set up Java environment
ENV JAVA_HOME=/jre
ENV PATH="${JAVA_HOME}/bin:${PATH}"

# Install runtime dependencies
RUN apk add --no-cache \
    ca-certificates \
    fontconfig \
    libstdc++ \
    && rm -rf /var/cache/apk/*

# Copy the custom JRE from build stage
COPY --from=jre-builder /jre $JAVA_HOME

# Copy the application JAR
COPY build/libs/demo-0.0.1-SNAPSHOT.jar app.jar

# Create non-root user
RUN addgroup -g 1000 appuser && \
    adduser -u 1000 -G appuser -s /bin/sh -D appuser && \
    chown -R appuser:appuser /app

USER appuser

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=40s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/actuator/health || exit 1

# Run the application
ENTRYPOINT ["java", "-jar", "app.jar"]
