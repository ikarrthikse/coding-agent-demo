# Comprehensive JVM optimizations using pre-built JAR
FROM amazoncorretto:21-alpine
WORKDIR /app

# Install CA certificates for SSL support
RUN apk add --no-cache ca-certificates

# Create directories for logs and dumps
RUN mkdir -p /app/logs /app/dumps

# Copy the pre-built JAR from host libs folder
COPY build/libs/demo-0.0.1-SNAPSHOT.jar app.jar

# Expose port
EXPOSE 8080

# Define entrypoint with comprehensive JVM optimizations
# -XX:+UseZGC -XX:+ZGenerational: Use the Generational Z Garbage Collector.
# -XX:MaxRAMPercentage=80.0: Use 80% of the container's memory for the Java heap.
# -XX:MetaspaceSize=128m: Initial size of Metaspace.
# -XX:MaxMetaspaceSize=256m: Maximum size of Metaspace.
# -XX:ReservedCodeCacheSize=128m: Size of the JIT code cache.
# -XX:+HeapDumpOnOutOfMemoryError: Generate a heap dump if an OutOfMemoryError occurs.
# -XX:HeapDumpPath=/app/dumps/java_pid%p.hprof: Path for heap dumps.
# -Xlog:gc*:file=/app/logs/gc-%t.log:time,uptime,level,tags:filecount=5,filesize=10m: Configure GC logging.
ENTRYPOINT ["java", \
            "-XX:+UseZGC", \
            "-XX:+ZGenerational", \
            "-XX:MaxRAMPercentage=80.0", \
            "-XX:MetaspaceSize=128m", \
            "-XX:MaxMetaspaceSize=256m", \
            "-XX:ReservedCodeCacheSize=128m", \
            "-XX:+HeapDumpOnOutOfMemoryError", \
            "-XX:HeapDumpPath=/app/dumps/java_pid%p.hprof", \
            "-Xlog:gc*:file=/app/logs/gc-%t.log:time,uptime,level,tags:filecount=5,filesize=10m", \
            "-jar", \
            "app.jar"]
